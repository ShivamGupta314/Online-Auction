generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  username       String          @unique
  email          String          @unique
  password       String
  role           Role            @default(BIDDER)
  bids           Bid[]
  paymentMethods PaymentMethod[]
  products       Product[]
  packages       UserPackage[]
  Notification   Notification[]
  WatchlistItems Watchlist[]

  @@index([role])
  @@index([email])
  @@index([username])
}

model Product {
  id              Int             @id @default(autoincrement())
  name            String
  description     String
  photoUrl        String
  minBidPrice     Float
  startTime       DateTime
  endTime         DateTime
  sellerId        Int
  categoryId      Int
  createdAt       DateTime        @default(now())
  processed       Boolean         @default(false)
  paymentReceived Boolean         @default(false)
  auctionPayment  AuctionPayment?
  bids            Bid[]
  category        Category        @relation(fields: [categoryId], references: [id])
  seller          User            @relation(fields: [sellerId], references: [id])
  watchedBy       Watchlist[]

  @@index([sellerId])
  @@index([categoryId])
  @@index([endTime])
  @@index([startTime])
  @@index([processed, paymentReceived])
  @@index([createdAt])
  @@index([minBidPrice])
  @@index([name])
}

model Bid {
  id        Int      @id @default(autoincrement())
  price     Float
  createdAt DateTime @default(now())
  productId Int
  bidderId  Int
  bidder    User     @relation(fields: [bidderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([productId])
  @@index([bidderId])
  @@index([price])
  @@index([createdAt])
  @@index([productId, createdAt])
  @@index([productId, price])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]

  @@index([name])
}

model Package {
  id           Int           @id @default(autoincrement())
  name         String
  price        Float
  createdAt    DateTime      @default(now())
  description  String?
  duration     Int           @default(30)
  features     String[]
  isActive     Boolean       @default(true)
  listingLimit Int           @default(10)
  users        UserPackage[]

  @@index([isActive])
  @@index([name])
  @@index([price])
}

model UserPackage {
  id            Int      @id @default(autoincrement())
  userId        Int
  packageId     Int
  endDate       DateTime
  isActive      Boolean  @default(true)
  listingsUsed  Int      @default(0)
  paymentId     Int?
  startDate     DateTime @default(now())
  transactionId String?
  package       Package  @relation(fields: [packageId], references: [id])
  payment       Payment? @relation(fields: [paymentId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([packageId])
  @@index([isActive])
  @@index([endDate])
  @@index([paymentId])
  @@index([startDate, endDate])
  @@index([userId, isActive])
}

model Payment {
  id              Int             @id @default(autoincrement())
  amount          Float
  currency        String          @default("USD")
  status          PaymentStatus
  paymentMethodId Int
  stripePaymentId String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  auctionPayment  AuctionPayment?
  paymentMethod   PaymentMethod   @relation(fields: [paymentMethodId], references: [id])
  transactions    Transaction[]
  userPackages    UserPackage[]

  @@index([paymentMethodId])
  @@index([status])
  @@index([createdAt])
  @@index([stripePaymentId])
  @@index([status, createdAt])
}

model PaymentMethod {
  id               Int       @id @default(autoincrement())
  type             String
  userId           Int
  stripeCustomerId String?
  lastFourDigits   String?
  expiryMonth      Int?
  expiryYear       Int?
  isDefault        Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  payments         Payment[]
  user             User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([stripeCustomerId])
  @@index([isDefault])
  @@index([userId, isDefault])
  @@index([userId, type])
}

model Transaction {
  id          Int               @id @default(autoincrement())
  paymentId   Int
  amount      Float
  currency    String            @default("USD")
  status      TransactionStatus
  type        TransactionType
  description String?
  metadata    Json?
  reference   String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  payment     Payment           @relation(fields: [paymentId], references: [id])

  @@index([paymentId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@index([reference])
  @@index([paymentId, status])
  @@index([type, status])
}

model AuctionPayment {
  id         Int                  @id @default(autoincrement())
  paymentId  Int                  @unique
  productId  Int                  @unique
  buyerId    Int
  sellerId   Int
  bidId      Int
  status     AuctionPaymentStatus @default(PENDING)
  escrowHeld Boolean              @default(true)
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  payment    Payment              @relation(fields: [paymentId], references: [id])
  product    Product              @relation(fields: [productId], references: [id])

  @@index([buyerId])
  @@index([sellerId])
  @@index([bidId])
  @@index([status])
  @@index([escrowHeld])
  @@index([buyerId, status])
  @@index([sellerId, status])
}

model NewsletterSubscription {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
  active    Boolean  @default(true)

  @@index([email])
  @@index([active])
  @@index([email, active])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  message   String
  type      NotificationType
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  metaData  Json?

  @@index([userId])
  @@index([read])
  @@index([createdAt])
  @@index([type])
  @@index([userId, read])
}

model Watchlist {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

enum Role {
  ADMIN
  SELLER
  BIDDER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum TransactionType {
  PAYMENT
  REFUND
  CHARGE
  SUBSCRIPTION
  AUCTION_PAYMENT
}

enum AuctionPaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
  RELEASED_TO_SELLER
}

enum NotificationType {
  BID_PLACED
  OUTBID
  AUCTION_WON
  AUCTION_ENDED
  PAYMENT_RECEIVED
  ITEM_SHIPPED
  GENERAL
}
